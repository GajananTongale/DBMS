
18 bank 4Q akurdi DML.txt
==========================

Question:
---------
Implement all SQL DML operations with operators, functions, and set operators for the following schema:
Create tables with appropriate constraints like primary key, foreign key, check constraints, not null, etc.

Schema:
-------
1. Account(Acc_no, branch_name, balance)
2. Branch(branch_name, branch_city, assets)
3. Customer(cust_name, cust_street, cust_city)
4. Depositor(cust_name, acc_no)
5. Loan(loan_no, branch_name, amount)
6. Borrower(cust_name, loan_no)

Queries to be solved:
---------------------
1. Find all customers who have an account or loan or both at bank.
2. Find all customers who have both account and loan at bank.
3. Find all customers who have account but no loan at the bank.
4. Find average account balance at Akurdi branch.

SQL Implementation:
--------------------

-- Step 1: Create and use database
CREATE DATABASE IF NOT EXISTS AkurdiBank18DB;
USE AkurdiBank18DB;

-- Step 2: Create tables with constraints

CREATE TABLE Branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50) NOT NULL,
    assets DECIMAL(12,2) CHECK (assets >= 0)
);

CREATE TABLE Account (
    acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50) NOT NULL,
    balance DECIMAL(10,2) CHECK (balance >= 0),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Customer (
    cust_name VARCHAR(100) PRIMARY KEY,
    cust_street VARCHAR(100) NOT NULL,
    cust_city VARCHAR(50) NOT NULL
);

CREATE TABLE Depositor (
    cust_name VARCHAR(100),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(50) NOT NULL,
    amount DECIMAL(10,2) CHECK (amount > 0),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(100),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);

-- Step 3: Insert sample data

INSERT INTO Branch VALUES
('Akurdi Branch', 'Pune', 10000000),
('Kothrud Branch', 'Pune', 12000000),
('Wakad Branch', 'Pune', 9000000);

INSERT INTO Account VALUES
(201, 'Akurdi Branch', 15000),
(202, 'Wakad Branch', 20000),
(203, 'Kothrud Branch', 11000),
(204, 'Akurdi Branch', 9000),
(205, 'Kothrud Branch', 18000);

INSERT INTO Customer VALUES
('Pranav Bhosale', 'Nigdi', 'Pune'),
('Jay Rajankar', 'Wakad', 'Pune'),
('Anvay Kulkarni', 'Baner', 'Pune'),
('Krishna Gandhi', 'Kothrud', 'Pune'),
('Gaurav Kaushalye', 'Shivajinagar', 'Pune');

INSERT INTO Depositor VALUES
('Pranav Bhosale', 201),
('Jay Rajankar', 202),
('Krishna Gandhi', 203),
('Anvay Kulkarni', 204);

INSERT INTO Loan VALUES
(501, 'Akurdi Branch', 30000),
(502, 'Wakad Branch', 40000),
(503, 'Kothrud Branch', 50000),
(504, 'Akurdi Branch', 25000),
(505, 'Wakad Branch', 20000);

INSERT INTO Borrower VALUES
('Pranav Bhosale', 501),
('Gaurav Kaushalye', 502),
('Jay Rajankar', 503),
('Krishna Gandhi', 504);

-- Step 4: Solve Queries

-- 1. Customers with account or loan or both (UNION)
SELECT cust_name FROM Depositor
UNION
SELECT cust_name FROM Borrower;

-- 2. Customers with both account AND loan (INTERSECT via INNER JOIN)
SELECT DISTINCT d.cust_name
FROM Depositor d
JOIN Borrower b ON d.cust_name = b.cust_name;

-- 3. Customers with account but NO loan (EXCEPT via LEFT JOIN + NULL filter)
SELECT DISTINCT d.cust_name
FROM Depositor d
LEFT JOIN Borrower b ON d.cust_name = b.cust_name
WHERE b.cust_name IS NULL;

-- 4. Average account balance at Akurdi branch
SELECT AVG(balance) AS avg_balance_akurdi
FROM Account
WHERE branch_name = 'Akurdi Branch';
