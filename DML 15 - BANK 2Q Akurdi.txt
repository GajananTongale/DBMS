
15 BANK AKURDI DML.txt
=======================

Question:
---------
Implement all SQL DML operations with operators, functions, and set operators for the following schema:
Create tables with appropriate constraints like primary key, foreign key, check constraints, not null, etc.

Schema:
-------
1. Account(Acc_no, branch_name, balance)
2. Branch(branch_name, branch_city, assets)
3. Customer(cust_name, cust_street, cust_city)
4. Depositor(cust_name, acc_no)
5. Loan(loan_no, branch_name, amount)
6. Borrower(cust_name, loan_no)

Queries to be solved:
---------------------
1. Find the names of all branches in loan relation.
2. Find all loan numbers for loans made at Akurdi Branch with loan amount > 12000.
3. Find all customers who have a loan from bank.
   â†’ Display their names, loan_no and loan amount.

SQL Implementation:
--------------------

-- Step 1: Create and use database
CREATE DATABASE IF NOT EXISTS AkurdiBankDB;
USE AkurdiBankDB;

-- Step 2: Create tables with constraints

CREATE TABLE Branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50) NOT NULL,
    assets DECIMAL(12,2) CHECK (assets >= 0)
);

CREATE TABLE Account (
    acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50) NOT NULL,
    balance DECIMAL(10,2) CHECK (balance >= 0),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Customer (
    cust_name VARCHAR(100) PRIMARY KEY,
    cust_street VARCHAR(100) NOT NULL,
    cust_city VARCHAR(50) NOT NULL
);

CREATE TABLE Depositor (
    cust_name VARCHAR(100),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(50) NOT NULL,
    amount DECIMAL(10,2) CHECK (amount > 0),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(100),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);

-- Step 3: Insert sample data (at least 5 records)

INSERT INTO Branch VALUES
('Akurdi Branch', 'Pune', 8000000),
('Wakad Branch', 'Pune', 10000000),
('Kothrud Branch', 'Pune', 9000000);

INSERT INTO Account VALUES
(101, 'Akurdi Branch', 12000),
(102, 'Wakad Branch', 15000),
(103, 'Kothrud Branch', 20000),
(104, 'Akurdi Branch', 18000),
(105, 'Wakad Branch', 10000);

INSERT INTO Customer VALUES
('Pranav Bhosale', 'Nigdi', 'Pune'),
('Jay Rajankar', 'Baner', 'Pune'),
('Anvay Kulkarni', 'Wakad', 'Pune'),
('Krishna Gandhi', 'Kothrud', 'Pune'),
('Gaurav Kaushalye', 'Aundh', 'Pune');

INSERT INTO Depositor VALUES
('Pranav Bhosale', 101),
('Jay Rajankar', 102),
('Anvay Kulkarni', 103),
('Krishna Gandhi', 104),
('Gaurav Kaushalye', 105);

INSERT INTO Loan VALUES
(201, 'Akurdi Branch', 25000),
(202, 'Wakad Branch', 30000),
(203, 'Kothrud Branch', 10000),
(204, 'Akurdi Branch', 15000),
(205, 'Wakad Branch', 20000);

INSERT INTO Borrower VALUES
('Pranav Bhosale', 201),
('Jay Rajankar', 202),
('Anvay Kulkarni', 203),
('Krishna Gandhi', 204),
('Gaurav Kaushalye', 205);

-- Step 4: Solve Queries

-- 1. Find names of all branches in loan relation
SELECT DISTINCT branch_name
FROM Loan;

-- 2. Find loan numbers for Akurdi Branch with loan amount > 12000
SELECT loan_no
FROM Loan
WHERE branch_name = 'Akurdi Branch' AND amount > 12000;

-- 3. Find customers with loans: name, loan_no, amount
SELECT b.cust_name, l.loan_no, l.amount
FROM Borrower b
JOIN Loan l ON b.loan_no = l.loan_no;
